# ========== Global variables ===========

# The root of the project
set(PROJECT_ROOT_DIR "${PROJECT_SOURCE_DIR}")

# Sources of external libraries
set(EXTERNAL_LIBS_SOURCES_DIR "${PROJECT_ROOT_DIR}/external/libs")

# Build Type
string(COMPARE EQUAL "Debug" "${CMAKE_BUILD_TYPE}" DEV_BUILD)
string(COMPARE EQUAL "Release" "${CMAKE_BUILD_TYPE}" SHIPPING_BUILD)
string(COMPARE EQUAL "RelWithDebInfo" "${CMAKE_BUILD_TYPE}" PROFILE_BUILD)

# Compiler frontends
string(COMPARE EQUAL "GNU" "${CMAKE_C_COMPILER_FRONTEND_VARIANT}" C_COMPILER_GNU_LIKE)
string(COMPARE EQUAL "MSVC" "${CMAKE_C_COMPILER_FRONTEND_VARIANT}" C_COMPILER_MSVC_LIKE)
string(COMPARE EQUAL "GNU" "${CMAKE_CXX_COMPILER_FRONTEND_VARIANT}" CXX_COMPILER_GNU_LIKE)
string(COMPARE EQUAL "MSVC" "${CMAKE_CXX_COMPILER_FRONTEND_VARIANT}" CXX_COMPILER_MSVC_LIKE)
assign_bool(COMPILER_GNU_LIKE C_COMPILER_GNU_LIKE OR CXX_COMPILER_GNU_LIKE)
assign_bool(COMPILER_MSVC_LIKE C_COMPILER_MSVC_LIKE OR CXX_COMPILER_MSVC_LIKE)

# Specific compilers
string(COMPARE EQUAL "Clang" "${CMAKE_C_COMPILER_ID}" C_COMPILER_CLANG)
string(COMPARE EQUAL "GNU" "${CMAKE_C_COMPILER_ID}" C_COMPILER_GCC)
string(COMPARE EQUAL "MSVC" "${CMAKE_C_COMPILER_ID}" C_COMPILER_MSVC)
string(COMPARE EQUAL "Clang" "${CMAKE_CXX_COMPILER_ID}" CXX_COMPILER_CLANG)
string(COMPARE EQUAL "GNU" "${CMAKE_CXX_COMPILER_ID}" CXX_COMPILER_GCC)
string(COMPARE EQUAL "MSVC" "${CMAKE_CXX_COMPILER_ID}" CXX_COMPILER_MSVC)
assign_bool(COMPILER_CLANG C_COMPILER_CLANG OR CXX_COMPILER_CLANG)
assign_bool(COMPILER_GCC C_COMPILER_GCC OR CXX_COMPILER_GCC)
assign_bool(COMPILER_MSVC C_COMPILER_MSVC OR CXX_COMPILER_MSVC)

# Host platform
string(COMPARE EQUAL "Windows" "${CMAKE_HOST_SYSTEM_NAME}" HOST_PLATFORM_WINDOWS)
string(COMPARE EQUAL "Linux" "${CMAKE_HOST_SYSTEM_NAME}" HOST_PLATFORM_LINUX)
string(COMPARE EQUAL "Darwin" "${CMAKE_HOST_SYSTEM_NAME}" HOST_PLATFORM_MACOS)

# Target platform
string(COMPARE EQUAL "Windows" "${CMAKE_SYSTEM_NAME}" PLATFORM_WINDOWS)
string(COMPARE EQUAL "Linux" "${CMAKE_SYSTEM_NAME}" PLATFORM_LINUX)
string(COMPARE EQUAL "Darwin" "${CMAKE_SYSTEM_NAME}" PLATFORM_MACOS)
string(COMPARE EQUAL "Emscripten" "${CMAKE_SYSTEM_NAME}" PLATFORM_WEB)

# ========== Global configuration ===========

# Generate compile_commands.json (compilation database),
# created at `build/<conf_name>/intermediate`
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)